Exercise 6: Library Management System



Linear Search

Linear search is a straightforward search algorithm that checks each element in the list sequentially until the desired element is found or the list ends.

- Steps:
  1. Start from the first element of the list.
  2. Compare each element with the target value.
  3. If a match is found, return the index of the element.
  4. If no match is found after checking all elements, return a value indicating that the element is not present.

- Time Complexity: O(n), where n is the number of elements in the list.

- Advantages: Simple to implement and does not require the list to be sorted.

- Disadvantages: Inefficient for large lists because it may need to check each element.

Binary Search
Binary search is an efficient search algorithm that works on sorted lists by repeatedly dividing the search interval in half.

- Steps:
  1. Start with the middle element of the list.
  2. If the middle element is the target, return the index.
  3. If the target is less than the middle element, repeat the search on the left half.
  4. If the target is greater than the middle element, repeat the search on the right half.
  5. Repeat the process until the target is found or the interval is empty.
- Time Complexity: O(log n), where n is the number of elements in the list.

- Advantages: Much faster for large lists compared to linear search.

- Disadvantages: Requires the list to be sorted.




4. Analysis

Time Complexity of Each Operation

- Linear Search:
  - Best Case: O(1) (if the element is at the beginning of the list)
  - Average Case: O(n)
  - Worst Case: O(n)

- Binary Search:
  - Best Case: O(1) (if the element is at the middle of the list)
  - Average Case: O(log n)
  - Worst Case: O(log n)

When to Use Each Algorithm

- Linear Search:
  - Use when the list is unsorted.
  - Suitable for small datasets where the overhead of sorting the list is not justified.
  - Simple to implement and does not require any preconditions.

- Binary Search:
  - Use when the list is sorted.
  - Suitable for large datasets where the overhead of sorting the list is justified.
  - More complex to implement but significantly faster for large datasets.

In summary, while linear search is simple and works on unsorted lists, it is inefficient for large datasets. Binary search, on the other hand, is much faster for large datasets but requires the list to be sorted. Depending on the size and order of the dataset, the appropriate search algorithm should be chosen to ensure efficient searching.