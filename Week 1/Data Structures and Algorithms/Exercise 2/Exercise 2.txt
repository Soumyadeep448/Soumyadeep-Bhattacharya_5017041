Exercise 2: E-commerce Platform Search Function





Big O Notation

Big O Notation is a mathematical notation used to describe the upper bound of an algorithm's running time or space complexity in terms of the input size n . It provides an abstract measurement of the algorithm's efficiency by focusing on the growth rate of the running time as the input size increases. Big O notation helps in comparing the performance of different algorithms and in identifying potential bottlenecks.

- O(1): Constant time complexity, the running time does not change with the input size.
- O(log n): Logarithmic time complexity, the running time grows logarithmically with the input size.
- O(n): Linear time complexity, the running time grows linearly with the input size.
- O(n log n): Linearithmic time complexity, the running time grows as \( n \) multiplied by \( \log n \).
- O(n^2): Quadratic time complexity, the running time grows quadratically with the input size.

Best, Average, and Worst-Case Scenarios for Search Operations

- Best Case: The scenario where the algorithm performs the minimum number of operations. For example, in a search operation, the best case is finding the element on the first try.

- Average Case: The scenario that represents the expected number of operations for a typical input. This is often determined by averaging the time over all possible inputs.

- Worst Case: The scenario where the algorithm performs the maximum number of operations. For example, in a search operation, the worst case is not finding the element until the end or not finding it at all.





4. Analysis

Time Complexity of Linear and Binary Search Algorithms

- Linear Search:
  - Best Case: O(1) - When the target element is at the first position.
  - Average Case: O(n) - On average, half of the elements need to be checked.
  - Worst Case: O(n) - When the target element is at the last position or not present at all.

- Binary Search:
  - Best Case: O(1) - When the target element is at the middle position.
  - Average Case: O(log n) - Each step reduces the search space by half.
  - Worst Case: O(log n) - When the element is not present and the search space is reduced to zero.

Suitability of Algorithms

- Linear Search:
  - Advantages: Simple implementation, does not require the array to be sorted.
  - Disadvantages: Inefficient for large datasets due to its linear time complexity.

- Binary Search:
  - Advantages: Much faster for large datasets due to its logarithmic time complexity.
  - Disadvantages: Requires the array to be sorted, which adds overhead if the dataset is dynamic and frequently updated.


Hence,
For an e-commerce platform where search performance is critical, binary search is generally more suitable due to its superior time complexity. However, maintaining a sorted array is essential for binary search, so additional considerations for sorting and managing dynamic updates to the product list are necessary. In cases where the dataset is relatively small or rarely changes, linear search may still be acceptable due to its simplicity.