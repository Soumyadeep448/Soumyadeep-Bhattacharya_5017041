Exercise 2: Error Handling

Scenario 1: Handle exceptions during fund transfers between accounts.

CREATE OR REPLACE PROCEDURE SafeTransferFunds(p_from_account NUMBER, p_to_account NUMBER, p_amount NUMBER) IS
BEGIN
    UPDATE Accounts
    SET Balance = Balance - p_amount
    WHERE AccountID = p_from_account;

    UPDATE Accounts
    SET Balance = Balance + p_amount
    WHERE AccountID = p_to_account;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        INSERT INTO ErrorLog (ErrorMessage) VALUES (SQLERRM);
END SafeTransferFunds;


Scenario 2: Manage errors when updating employee salaries.

CREATE OR REPLACE PROCEDURE UpdateSalary(p_employee_id NUMBER, p_percentage NUMBER) IS
BEGIN
    UPDATE Employees
    SET Salary = Salary + (Salary * p_percentage / 100)
    WHERE EmployeeID = p_employee_id;

    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        INSERT INTO ErrorLog (ErrorMessage) VALUES ('Employee ID not found: ' || p_employee_id);
    WHEN OTHERS THEN
        ROLLBACK;
        INSERT INTO ErrorLog (ErrorMessage) VALUES (SQLERRM);
END UpdateSalary;


Scenario 3: Ensure data integrity when adding a new customer.

CREATE OR REPLACE PROCEDURE AddNewCustomer(p_customer_id NUMBER, p_name VARCHAR2, p_dob DATE, p_balance NUMBER) IS
BEGIN
    INSERT INTO Customers (CustomerID, Name, DOB, Balance, LastModified)
    VALUES (p_customer_id, p_name, p_dob, p_balance, SYSDATE);
    
    COMMIT;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        INSERT INTO ErrorLog (ErrorMessage) VALUES ('Customer ID already exists: ' || p_customer_id);
    WHEN OTHERS THEN
        ROLLBACK;
        INSERT INTO ErrorLog (ErrorMessage) VALUES (SQLERRM);
END AddNewCustomer;
